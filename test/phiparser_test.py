import unittest
import io
import sys
import phiparser
from datetime import datetime


class PhiTest(unittest.TestCase):

    @staticmethod
    def capture_content_process(content):
        processed_lines = [line.strip() for line in content.split('\n')]
        processed_output = '\n'.join(processed_lines)
        res = processed_output.replace(" ", "").strip()
        # print("res : " + res)
        return res

    def make_test(self, test_string, expect_output):
        expect_output = expect_output.replace(" ", "").strip()

        test = phiparser.PhiParser()
        test.parse_input_string(test_string)

        captured_output = io.StringIO()
        sys.stdout = captured_output

        test.show_dict()

        sys.stdout = sys.__stdout__
        output_content = captured_output.getvalue()

        res = self.capture_content_process(output_content)
        # print("res out side: " + res)
        self.assertEqual(expect_output, res)

    @classmethod
    def setUpClass(cls):
        super(PhiTest, cls).setUpClass()
        print("------ Phi Parser Unit Test Start ------")
        print("------ Test Time: " + str(datetime.now()) + " ------")

    # TestCase generated by ChatGPT
    def test_1_ByGPT(self):
        test_string = '''
                SELECT ATTRIBUTE(S):
                cust
                NUMBER OF GROUPING VARIABLES(n):
                1
                GROUPING ATTRIBUTES(V):
                cust
                F - VECT([F]):
                1_sum_quant
                SELECT CONDITION - VECT([σ]):
                1.state = 'NY'
                '''
        expect_print = '''
                ------ CurrentMFStructureshowasbelow ------
                ------ SELECT_ATTRIBUTE_s ------
                Non-aggregate: 
                value:cust
                ------ GROUPING_ATTRIBUTES_v ------
                cust
                ------ F - VECT_f ------
                number: 1
                aggregate: sum
                target: quant
                ------ SELECT_CONDITION ------
                number: 1
                target: state
                sign: =
                condition: NY
                ------ NUMBER_OF_GROUPING_VARIABLES_n ------
                1
                '''
        self.make_test(test_string, expect_print)
        return self

    def test_2_ByGPT(self):
        # Add another test method with different test_string and expect_output
        test_string = '''
                SELECT ATTRIBUTE(S):
                cust, 1_sum_quant, 2_sum_quant
                NUMBER OF GROUPING VARIABLES(n):
                2
                GROUPING ATTRIBUTES(V):
                cust, state
                F - VECT([F]):
                1_sum_quant, 2_sum_quant
                SELECT CONDITION - VECT([σ]):
                1.state = 'NY'
                2.state = 'NJ'
                '''
        expect_print = '''
                ------ CurrentMFStructureshowasbelow ------
                ------ SELECT_ATTRIBUTE_s ------
                Non-aggregate: 
                value:cust
                number:1
                aggregate:sum
                target:quant
                number:2
                aggregate:sum
                target:quant
                ------ GROUPING_ATTRIBUTES_v ------
                cust
                state
                ------ F - VECT_f ------
                number: 1
                aggregate: sum
                target: quant
                number: 2
                aggregate: sum
                target: quant
                ------ SELECT_CONDITION ------
                number: 1
                target: state
                sign: =
                condition: NY
                number: 2
                target: state
                sign: =
                condition: NJ
                ------ NUMBER_OF_GROUPING_VARIABLES_n ------
                2
                '''
        self.make_test(test_string, expect_print)
        return self

    def test_3_ByGPT(self):
        # Add another test method with different test_string and expect_output
        test_string = '''
                SELECT ATTRIBUTE(S):
                cust, 1_sum_quant, 2_avg_quant
                NUMBER OF GROUPING VARIABLES(n):
                2
                GROUPING ATTRIBUTES(V):
                cust, state
                F - VECT([F]):
                1_sum_quant, 2_avg_quant
                SELECT CONDITION - VECT([σ]):
                1.state = 'NY'
                2.state = 'NJ'
                '''
        expect_print = '''
                ------ CurrentMFStructureshowasbelow ------
                ------ SELECT_ATTRIBUTE_s ------
                Non-aggregate: 
                value:cust
                number:1
                aggregate:sum
                target:quant
                number:2
                aggregate:avg
                target:quant
                ------ GROUPING_ATTRIBUTES_v ------
                cust
                state
                ------ F - VECT_f ------
                number: 1
                aggregate: sum
                target: quant
                number: 2
                aggregate: avg
                target: quant
                ------ SELECT_CONDITION ------
                number: 1
                target: state
                sign: =
                condition: NY
                number: 2
                target: state
                sign: =
                condition: NJ
                ------ NUMBER_OF_GROUPING_VARIABLES_n ------
                2
                '''
        self.make_test(test_string, expect_print)
        return self

    def test_4_ByGPT(self):
        # Add another test method with different test_string and expect_output
        test_string = '''
                SELECT ATTRIBUTE(S):
                prod, 1_avg_price, 2_sum_quantity
                NUMBER OF GROUPING VARIABLES(n):
                2
                GROUPING ATTRIBUTES(V):
                prod, category
                F - VECT([F]):
                1_avg_price, 2_sum_quantity
                SELECT CONDITION - VECT([σ]):
                1.category > 'Electronics'
                2.category < 'Clothing'
                '''
        expect_print = '''
                ------ CurrentMFStructureshowasbelow ------
                ------ SELECT_ATTRIBUTE_s ------
                Non-aggregate: 
                value:prod
                number:1
                aggregate:avg
                target:price
                number:2
                aggregate:sum
                target:quantity
                ------ GROUPING_ATTRIBUTES_v ------
                prod
                category
                ------ F - VECT_f ------
                number: 1
                aggregate: avg
                target: price
                number: 2
                aggregate: sum
                target: quantity
                ------ SELECT_CONDITION ------
                number: 1
                target: category
                sign: >
                condition: Electronics
                number: 2
                target: category
                sign: <
                condition: Clothing
                ------ NUMBER_OF_GROUPING_VARIABLES_n ------
                2
                '''
        self.make_test(test_string, expect_print)

    def test_5_ByGPT(self):
        # Add another test method with different test_string and expect_output
        test_string = '''
                SELECT ATTRIBUTE(S):
                emp, 1_max_salary, 2_min_years
                NUMBER OF GROUPING VARIABLES(n):
                2
                GROUPING ATTRIBUTES(V):
                emp, department
                F - VECT([F]):
                1_max_salary, 2_min_years
                SELECT CONDITION - VECT([σ]):
                1.department != 'IT'
                2.department != 'HR'
                '''
        expect_print = '''
                ------ CurrentMFStructureshowasbelow ------
                ------ SELECT_ATTRIBUTE_s ------
                Non-aggregate: 
                value:emp
                number:1
                aggregate:max
                target:salary
                number:2
                aggregate:min
                target:years
                ------ GROUPING_ATTRIBUTES_v ------
                emp
                department
                ------ F - VECT_f ------
                number: 1
                aggregate: max
                target: salary
                number: 2
                aggregate: min
                target: years
                ------ SELECT_CONDITION ------
                number: 1
                target: department
                sign: !=
                condition: IT
                number: 2
                target: department
                sign: !=
                condition: HR
                ------ NUMBER_OF_GROUPING_VARIABLES_n ------
                2
                '''
        self.make_test(test_string, expect_print)
        return self

    def test_6_ByGPT(self):
        test_string = '''
                SELECT ATTRIBUTE(S):
                product, 1_avg_price, 2_sum_sales
                NUMBER OF GROUPING VARIABLES(n):
                2
                GROUPING ATTRIBUTES(V):
                product, region
                F - VECT([F]):
                1_avg_price, 2_sum_sales
                SELECT CONDITION - VECT([σ]):
                1.region <= 'East'
                2.region >= 'West'
                '''
        expect_print = '''
                ------ CurrentMFStructureshowasbelow ------
                ------ SELECT_ATTRIBUTE_s ------
                Non-aggregate: 
                value:product
                number:1
                aggregate:avg
                target:price
                number:2
                aggregate:sum
                target:sales
                ------ GROUPING_ATTRIBUTES_v ------
                product
                region
                ------ F - VECT_f ------
                number: 1
                aggregate: avg
                target: price
                number: 2
                aggregate: sum
                target: sales
                ------ SELECT_CONDITION ------
                number: 1
                target: region
                sign: <=
                condition: East
                number: 2
                target: region
                sign: >=
                condition: West
                ------ NUMBER_OF_GROUPING_VARIABLES_n ------
                2
                '''
        self.make_test(test_string, expect_print)
        return self

    def test_7_ByGPT(self):
        test_string = '''
                SELECT ATTRIBUTE(S):
                employee, 1_min_salary, 2_avg_years
                NUMBER OF GROUPING VARIABLES(n):
                2
                GROUPING ATTRIBUTES(V):
                employee, department
                F - VECT([F]):
                1_min_salary, 2_avg_years
                SELECT CONDITION - VECT([σ]):
                1.department = 'Finance'
                2.department = 'Marketing'
                '''
        expect_print = '''
                ------ CurrentMFStructureshowasbelow ------
                ------ SELECT_ATTRIBUTE_s ------
                Non-aggregate: 
                value:employee
                number:1
                aggregate:min
                target:salary
                number:2
                aggregate:avg
                target:years
                ------ GROUPING_ATTRIBUTES_v ------
                employee
                department
                ------ F - VECT_f ------
                number: 1
                aggregate: min
                target: salary
                number: 2
                aggregate: avg
                target: years
                ------ SELECT_CONDITION ------
                number: 1
                target: department
                sign: =
                condition: Finance
                number: 2
                target: department
                sign: =
                condition: Marketing
                ------ NUMBER_OF_GROUPING_VARIABLES_n ------
                2
                '''
        self.make_test(test_string, expect_print)
        return self

    def test_8_ByGPT(self):
        test_string = '''
                SELECT ATTRIBUTE(S):
                customer, 1_sum_purchases, 2_avg_discount
                NUMBER OF GROUPING VARIABLES(n):
                2
                GROUPING ATTRIBUTES(V):
                customer, gender
                F - VECT([F]):
                1_sum_purchases, 2_avg_discount
                SELECT CONDITION - VECT([σ]):
                1.gender = 'Male'
                2.gender != 'Female'
                '''
        expect_print = '''
                ------ CurrentMFStructureshowasbelow ------
                ------ SELECT_ATTRIBUTE_s ------
                Non-aggregate: 
                value:customer
                number:1
                aggregate:sum
                target:purchases
                number:2
                aggregate:avg
                target:discount
                ------ GROUPING_ATTRIBUTES_v ------
                customer
                gender
                ------ F - VECT_f ------
                number: 1
                aggregate: sum
                target: purchases
                number: 2
                aggregate: avg
                target: discount
                ------ SELECT_CONDITION ------
                number: 1
                target: gender
                sign: =
                condition: Male
                number: 2
                target: gender
                sign: !=
                condition: Female
                ------ NUMBER_OF_GROUPING_VARIABLES_n ------
                2
                '''
        self.make_test(test_string, expect_print)
        return self

    def test_9_ByGPT(self):
        test_string = '''
                SELECT ATTRIBUTE(S):
                employee, 1_max_salary, 2_min_years
                NUMBER OF GROUPING VARIABLES(n):
                2
                GROUPING ATTRIBUTES(V):
                employee, department
                F - VECT([F]):
                1_max_salary, 2_min_years
                SELECT CONDITION - VECT([σ]):
                1.department = 'Engineering'
                2.department = 'Sales'
                '''
        expect_print = '''
                ------ CurrentMFStructureshowasbelow ------
                ------ SELECT_ATTRIBUTE_s ------
                Non-aggregate: 
                value:employee
                number:1
                aggregate:max
                target:salary
                number:2
                aggregate:min
                target:years
                ------ GROUPING_ATTRIBUTES_v ------
                employee
                department
                ------ F - VECT_f ------
                number: 1
                aggregate: max
                target: salary
                number: 2
                aggregate: min
                target: years
                ------ SELECT_CONDITION ------
                number: 1
                target: department
                sign: =
                condition: Engineering
                number: 2
                target: department
                sign: =
                condition: Sales
                ------ NUMBER_OF_GROUPING_VARIABLES_n ------
                2
                '''
        self.make_test(test_string, expect_print)
        return self

    def test_CaseFromCourse(self):
        test_string = '''
        SELECT ATTRIBUTE(S):
        cust, 1_sum_quant, 2_sum_quant, 3_sum_quant
        NUMBER OF GROUPING VARIABLES(n):
        3
        GROUPING ATTRIBUTES(V):
        cust
        F - VECT([F]):
        1_sum_quant, 1_avg_quant, 2_sum_quant, 3_sum_quant, 3_avg_quant
        SELECT CONDITION - VECT([σ]):
        1.state = 'NY'
        2.state = 'NJ'
        '''
        expect_print = '''
        ------ CurrentMFStructureshowasbelow ------
        ------ SELECT_ATTRIBUTE_s ------
        Non-aggregate: 
        value:cust
        number:1
        aggregate:sum
        target:quant
        number:2
        aggregate:sum
        target:quant
        number:3
        aggregate:sum
        target:quant
        ------ GROUPING_ATTRIBUTES_v ------
        cust
        ------ F - VECT_f ------
        number: 1
        aggregate: sum
        target: quant
        number: 1
        aggregate: avg
        target: quant
        number:2
        aggregate:sum
        target:quant
        number:3
        aggregate:sum
        target:quant
        number:3
        aggregate:avg
        target:quant
        ------ SELECT_CONDITION ------
        number: 1
        target: state
        sign: =
        condition: NY
        number: 2
        target: state
        sign: =
        condition: NJ
        ------ NUMBER_OF_GROUPING_VARIABLES_n ------
        3
        '''
        self.make_test(test_string, expect_print)
        return self


# ------ init and run test ------
'''
test = PhiTest()
test.test_CaseFromCourse()
'''
if __name__ == '__main__':
    test = PhiTest()
    test.test_CaseFromCourse()
